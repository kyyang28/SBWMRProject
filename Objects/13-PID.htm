<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\13-PID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\13-PID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Apr 13 23:18:44 2019
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskDataLogger &rArr; handleBlackbox &rArr; blackboxDeviceBeginLog &rArr; blackboxSDCardBeginLog &rArr; blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[db]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">NMI_Handler</a><BR>
 <LI><a href="#[18]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">HardFault_Handler</a><BR>
 <LI><a href="#[19]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SVC_Handler</a><BR>
 <LI><a href="#[1d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PendSV_Handler</a><BR>
 <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1c2]">gcd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c2]">gcd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from system.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from timer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from serial_uart_stm32f4xx.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from serial_uart_stm32f4xx.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">USART6_IRQHandler</a> from serial_uart_stm32f4xx.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[97]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[74]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[75]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[73]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[78]">afatfs_sdcardReadComplete</a> from asyncfatfs.o(i.afatfs_sdcardReadComplete) referenced from asyncfatfs.o(i.afatfs_cacheSector)
 <LI><a href="#[77]">afatfs_sdcardWriteComplete</a> from asyncfatfs.o(i.afatfs_sdcardWriteComplete) referenced from asyncfatfs.o(i.afatfs_cacheFlushSector)
 <LI><a href="#[7c]">biquadFilterApply</a> from filter.o(i.biquadFilterApply) referenced from gyro.o(i.gyroInitFilters)
 <LI><a href="#[7a]">blackboxLogDirCreated</a> from blackbox_io.o(i.blackboxLogDirCreated) referenced from blackbox_io.o(i.blackboxSDCardBeginLog)
 <LI><a href="#[79]">blackboxLogFileCreated</a> from blackbox_io.o(i.blackboxLogFileCreated) referenced from blackbox_io.o(i.blackboxCreateLogFile)
 <LI><a href="#[76]">fputc</a> from main.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7e]">hcsr04_extiHandler_ultrasound1</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound1) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[7f]">hcsr04_extiHandler_ultrasound2</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound2) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[80]">hcsr04_extiHandler_ultrasound3</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound3) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[81]">hcsr04_extiHandler_ultrasound4</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound4) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[82]">hcsr04_extiHandler_ultrasound5</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound5) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[83]">hcsr04_extiHandler_ultrasound6</a> from ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound6) referenced from ultrasound_hcsr04.o(i.hcsr04_init)
 <LI><a href="#[95]">isUartTransmitBufferEmpty</a> from serial_uart.o(i.isUartTransmitBufferEmpty) referenced from serial_uart.o(.constdata)
 <LI><a href="#[8a]">mpu9250ReadRegister</a> from accgyro_spi_mpu9250.o(i.mpu9250ReadRegister) referenced from accgyro_mpu.o(i.mpuDetect)
 <LI><a href="#[8e]">mpu9250ResetGyro</a> from accgyro_spi_mpu9250.o(i.mpu9250ResetGyro) referenced from accgyro_mpu.o(i.mpuDetect)
 <LI><a href="#[8b]">mpu9250SlowReadRegister</a> from accgyro_spi_mpu9250.o(i.mpu9250SlowReadRegister) referenced from accgyro_mpu.o(i.mpuDetect)
 <LI><a href="#[84]">mpu9250SpiAccInit</a> from accgyro_spi_mpu9250.o(i.mpu9250SpiAccInit) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiAccDetect)
 <LI><a href="#[86]">mpu9250SpiGyroInit</a> from accgyro_spi_mpu9250.o(i.mpu9250SpiGyroInit) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
 <LI><a href="#[8c]">mpu9250WriteRegister</a> from accgyro_spi_mpu9250.o(i.mpu9250WriteRegister) referenced from accgyro_mpu.o(i.mpuDetect)
 <LI><a href="#[85]">mpuAccRead</a> from accgyro_mpu.o(i.mpuAccRead) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiAccDetect)
 <LI><a href="#[89]">mpuCheckDataReady</a> from accgyro_mpu.o(i.mpuCheckDataReady) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
 <LI><a href="#[87]">mpuGyroRead</a> from accgyro_mpu.o(i.mpuGyroRead) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
 <LI><a href="#[8f]">mpuIntExtiHandler</a> from accgyro_mpu.o(i.mpuIntExtiHandler) referenced from accgyro_mpu.o(i.mpuGyroInit)
 <LI><a href="#[88]">mpuTemperatureRead</a> from accgyro_mpu.o(i.mpuTemperatureRead) referenced from accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
 <LI><a href="#[7b]">nullFilterApply</a> from filter.o(i.nullFilterApply) referenced from gyro.o(i.gyroInitFilters)
 <LI><a href="#[7d]">pt1FilterApply</a> from filter.o(i.pt1FilterApply) referenced from gyro.o(i.gyroInitFilters)
 <LI><a href="#[7d]">pt1FilterApply</a> from filter.o(i.pt1FilterApply) referenced from pid.o(i.pidInitFilters)
 <LI><a href="#[15]">taskDataLogger</a> from fc_tasks.o(i.taskDataLogger) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[6]">taskIMUUpdateAttitude</a> from imu.o(i.taskIMUUpdateAttitude) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[7]">taskMotorEncoder</a> from fc_tasks.o(i.taskMotorEncoder) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[8]">taskOLEDDisplay</a> from fc_tasks.o(i.taskOLEDDisplay) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[3]">taskSystem</a> from scheduler.o(i.taskSystem) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[a]">taskUltrasound1ReadData</a> from fc_tasks.o(i.taskUltrasound1ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[c]">taskUltrasound2ReadData</a> from fc_tasks.o(i.taskUltrasound2ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[e]">taskUltrasound3ReadData</a> from fc_tasks.o(i.taskUltrasound3ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[10]">taskUltrasound4ReadData</a> from fc_tasks.o(i.taskUltrasound4ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[12]">taskUltrasound5ReadData</a> from fc_tasks.o(i.taskUltrasound5ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[14]">taskUltrasound6ReadData</a> from fc_tasks.o(i.taskUltrasound6ReadData) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[5]">taskUpdateAccelerometer</a> from fc_tasks.o(i.taskUpdateAccelerometer) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[4]">taskUpdateGyro</a> from fc_tasks.o(i.taskUpdateGyro) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[93]">uartRead</a> from serial_uart.o(i.uartRead) referenced from serial_uart.o(.constdata)
 <LI><a href="#[94]">uartSetBaudRate</a> from serial_uart.o(i.uartSetBaudRate) referenced from serial_uart.o(.constdata)
 <LI><a href="#[96]">uartSetMode</a> from serial_uart.o(i.uartSetMode) referenced from serial_uart.o(.constdata)
 <LI><a href="#[91]">uartTotalRxBytesWaiting</a> from serial_uart.o(i.uartTotalRxBytesWaiting) referenced from serial_uart.o(.constdata)
 <LI><a href="#[92]">uartTotalTxBytesFree</a> from serial_uart.o(i.uartTotalTxBytesFree) referenced from serial_uart.o(.constdata)
 <LI><a href="#[90]">uartWrite</a> from serial_uart.o(i.uartWrite) referenced from serial_uart.o(.constdata)
 <LI><a href="#[9]">ultrasound1Update</a> from ultrasound.o(i.ultrasound1Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[b]">ultrasound2Update</a> from ultrasound.o(i.ultrasound2Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[d]">ultrasound3Update</a> from ultrasound.o(i.ultrasound3Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[f]">ultrasound4Update</a> from ultrasound.o(i.ultrasound4Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[11]">ultrasound5Update</a> from ultrasound.o(i.ultrasound5Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[13]">ultrasound6Update</a> from ultrasound.o(i.ultrasound6Update) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[8d]">verifyMPU9250WriteRegister</a> from accgyro_spi_mpu9250.o(i.verifyMPU9250WriteRegister) referenced from accgyro_mpu.o(i.mpuDetect)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[27f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[280]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[bc]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[281]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ab]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[282]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[283]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[284]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[285]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[286]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[287]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[288]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[289]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[28d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[28f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[290]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[291]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[292]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[293]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[294]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[295]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[296]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[297]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[298]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[299]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[29a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[29b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[29c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[99]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[29d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[aa]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[29e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ac]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sensorsAutodetect &rArr; gyroInit &rArr; mpuDetect &rArr; mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[dc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[af]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2a0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b3]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_convertFilenameToFATStyle
</UL>

<P><STRONG><a name="[b5]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxCreateLogFile
</UL>

<P><STRONG><a name="[b7]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[d5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[ba]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bd]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[192]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxPrint
</UL>

<P><STRONG><a name="[16a]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fwrite
</UL>

<P><STRONG><a name="[c0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2a1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2a6]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[c5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c4]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initFileHandle
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueClear
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c7]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[166]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2aa]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2ad]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[ca]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[b9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2af]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[73]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a0]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bf]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2b0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d0]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d3]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[cc]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ae]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2b2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[dd]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[df]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e0]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ce]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[256]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
</UL>

<P><STRONG><a name="[254]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[258]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[259]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[255]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[25e]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_MemoryTargetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
</UL>

<P><STRONG><a name="[25a]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[253]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>EXTIConfig</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, exti.o(i.EXTIConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXTIConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPinIdx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_PortSourceGPIO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_PinSource
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
</UL>

<P><STRONG><a name="[ec]"></a>EXTIEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti.o(i.EXTIEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTIEnable &rArr; IO_EXTI_Line
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
</UL>

<P><STRONG><a name="[1d3]"></a>EXTIHandlerInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTIHandlerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
</UL>

<P><STRONG><a name="[ed]"></a>EXTIInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = EXTIInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[e2]"></a>EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, exti.o(i.EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[f0]"></a>EnableGPIOClk</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.EnableGPIOClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnableGPIOClk &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[f6]"></a>IOConfigGPIO</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, io.o(i.IOConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPortIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardInsertionDetectInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
</UL>

<P><STRONG><a name="[f9]"></a>IOConfigGPIOAF</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, io.o(i.IOConfigGPIOAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_PinSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPortIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[fe]"></a>IOGetByTag</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, io.o(i.IOGetByTag))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardInsertionDetectInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonModeSwitchHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deactivateMotors
</UL>

<P><STRONG><a name="[1e6]"></a>IOGlobalInit</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, io.o(i.IOGlobalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOGlobalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>IOHi</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io.o(i.IOHi))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ReadRegister
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_start_sequence
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_start_sequence
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_start_sequence
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_start_sequence
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_start_sequence
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_start_sequence
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[ff]"></a>IOInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, io.o(i.IOInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardInsertionDetectInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[10a]"></a>IOLo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(i.IOLo))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ReadRegister
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_start_sequence
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_start_sequence
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_start_sequence
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_start_sequence
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_start_sequence
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_start_sequence
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deactivateMotors
</UL>

<P><STRONG><a name="[19c]"></a>IORead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, io.o(i.IORead))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_isInserted
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonModeSwitchHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound6
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound5
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound1
</UL>

<P><STRONG><a name="[100]"></a>IOWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io.o(i.IOWrite))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
</UL>

<P><STRONG><a name="[e8]"></a>IO_EXTI_Line</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, io.o(i.IO_EXTI_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IO_EXTI_Line
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPinIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIEnable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[e5]"></a>IO_EXTI_PinSource</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io.o(i.IO_EXTI_PinSource))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPinIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[e6]"></a>IO_EXTI_PortSourceGPIO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io.o(i.IO_EXTI_PortSourceGPIO))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPortIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[e4]"></a>IO_GPIOPinIdx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, io.o(i.IO_GPIOPinIdx))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_PinSource
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_Line
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_PinSource
</UL>

<P><STRONG><a name="[f7]"></a>IO_GPIOPortIdx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io.o(i.IO_GPIOPortIdx))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_EXTI_PortSourceGPIO
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>

<P><STRONG><a name="[fa]"></a>IO_GPIO_PinSource</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io.o(i.IO_GPIO_PinSource))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPinIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
</UL>

<P><STRONG><a name="[fc]"></a>LedInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, led.o(i.LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LedInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>LedSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(i.LedSet))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateMotors
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[eb]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[231]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[101]"></a>OLED_Clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[105]"></a>OLED_DrawPoint</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[102]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[104]"></a>OLED_ShowChar</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNumber
</UL>

<P><STRONG><a name="[106]"></a>OLED_ShowNumber</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OLED_ShowNumber &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[108]"></a>OLED_ShowString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[103]"></a>OLED_WR_Byte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>

<P><STRONG><a name="[f1]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
</UL>

<P><STRONG><a name="[10c]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[f2]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[f3]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
</UL>

<P><STRONG><a name="[10e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[ee]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
</UL>

<P><STRONG><a name="[10d]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[232]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[f8]"></a>RCC_ClockCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcc.o(i.RCC_ClockCmd))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[112]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[10b]"></a>RCC_ResetCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcc.o(i.RCC_ResetCmd))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[235]"></a>Read_Encoder</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fc_tasks.o(i.Read_Encoder))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[1aa]"></a>ResetBeeperConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(i.ResetBeeperConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[1a9]"></a>ResetLedStatusConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, config.o(i.ResetLedStatusConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[1a7]"></a>ResetRollAndPitchTrims</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, acceleration.o(i.ResetRollAndPitchTrims))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[10f]"></a>ResetSerialConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, config.o(i.ResetSerialConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResetSerialConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[1a8]"></a>ResetSerialPinConfig</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, config.o(i.ResetSerialPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ResetSerialPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[22a]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[110]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[22b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusBusy
</UL>

<P><STRONG><a name="[22e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
</UL>

<P><STRONG><a name="[22d]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
</UL>

<P><STRONG><a name="[229]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[e7]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
</UL>

<P><STRONG><a name="[113]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>SysTick_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_CC_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[115]"></a>TIM_ICInit</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
</UL>

<P><STRONG><a name="[208]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
</UL>

<P><STRONG><a name="[247]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[24b]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[248]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[24c]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[249]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[24d]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[246]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[24a]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[209]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
</UL>

<P><STRONG><a name="[118]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[11a]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[11b]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[116]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>

<P><STRONG><a name="[1a0]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>

<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART6_IRQHandler &rArr; uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>

<P><STRONG><a name="[25b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[257]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[24e]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>

<P><STRONG><a name="[25c]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_HalfDuplexCmd))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>

<P><STRONG><a name="[250]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[11d]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>

<P><STRONG><a name="[24f]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>

<P><STRONG><a name="[d2]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[123]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[11e]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
</UL>

<P><STRONG><a name="[122]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
</UL>

<P><STRONG><a name="[126]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
</UL>

<P><STRONG><a name="[128]"></a>__hardfp_log2f</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, log2f.o(i.__hardfp_log2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_log2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterGetNotchQ
</UL>

<P><STRONG><a name="[12a]"></a>__hardfp_lrintf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lrintf.o(i.__hardfp_lrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignBoard
</UL>

<P><STRONG><a name="[12d]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterGetNotchQ
</UL>

<P><STRONG><a name="[2b5]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[12f]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_round &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[135]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
</UL>

<P><STRONG><a name="[136]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterGetNotchQ
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
</UL>

<P><STRONG><a name="[129]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
</UL>

<P><STRONG><a name="[120]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[125]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[121]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[12e]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[124]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[127]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[bb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[137]"></a>accDetect</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, acceleration.o(i.accDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = accDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiAccDetect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accInit
</UL>

<P><STRONG><a name="[13a]"></a>accInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, acceleration.o(i.accInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = accInit &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accDetect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[1f5]"></a>accSetCalibrationCycles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acceleration.o(i.accSetCalibrationCycles))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>accUpdate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, acceleration.o(i.accUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = accUpdate &rArr; alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterApply
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAccelerationCalibrationComplete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performAccelerationCalibration
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpdateAccelerometer
</UL>

<P><STRONG><a name="[140]"></a>activateConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, config.o(i.activateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = activateConfig &rArr; setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationTrims
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationFilter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[144]"></a>activateMotors</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fc_tasks.o(i.activateMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = activateMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocityControlSBWMR
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[162]"></a>afatfs_chdir</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = afatfs_chdir &rArr; afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initFileHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initContinue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[170]"></a>afatfs_fclose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = afatfs_fclose &rArr; afatfs_fcloseContinue &rArr; afatfs_saveDirectoryEntry &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUpdateFilesize
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fcloseContinue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxStopLogging
</UL>

<P><STRONG><a name="[169]"></a>afatfs_findFirst</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_findFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = afatfs_findFirst &rArr; afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxLogDirCreated
</UL>

<P><STRONG><a name="[17b]"></a>afatfs_findLast</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_findLast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = afatfs_findLast &rArr; afatfs_fileUnlockCacheSector
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[159]"></a>afatfs_findNext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_findNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = afatfs_findNext &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetCursorPhysicalSector
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[17c]"></a>afatfs_flush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = afatfs_flush &rArr; afatfs_cacheFlushSector &rArr; sdcard_writeBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheFlushSector
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_poll
</UL>

<P><STRONG><a name="[17d]"></a>afatfs_fopen</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateFileHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxCreateLogFile
</UL>

<P><STRONG><a name="[164]"></a>afatfs_fseek</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternal
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findFirst
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
</UL>

<P><STRONG><a name="[16c]"></a>afatfs_ftruncate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_ftruncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = afatfs_ftruncate &rArr; afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
</UL>

<P><STRONG><a name="[180]"></a>afatfs_fwrite</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = afatfs_fwrite &rArr; afatfs_fileLockCursorSectorForWrite &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxPrint
</UL>

<P><STRONG><a name="[18f]"></a>afatfs_getFilesystemState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_getFilesystemState))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxDeviceOpen
</UL>

<P><STRONG><a name="[194]"></a>afatfs_getFreeBufferSpace</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_getFreeBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = afatfs_getFreeBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxReplenishHeaderBudget
</UL>

<P><STRONG><a name="[1f4]"></a>afatfs_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_init))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>afatfs_isFull</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_isFull))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxDeviceOpen
</UL>

<P><STRONG><a name="[184]"></a>afatfs_mkdir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = afatfs_mkdir &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateFileHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[185]"></a>afatfs_poll</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = afatfs_poll &rArr; afatfs_fileOperationContinue &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_flush
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initContinue
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDataLogger
</UL>

<P><STRONG><a name="[13d]"></a>alignSensors</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, boardalignment.o(i.alignSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[188]"></a>beeperInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sound_beeper.o(i.beeperInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = beeperInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>biquadFilterApply</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, filter.o(i.biquadFilterApply))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro.o(i.gyroInitFilters)
</UL>
<P><STRONG><a name="[18a]"></a>biquadFilterInit</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, filter.o(i.biquadFilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInitFilters
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
</UL>

<P><STRONG><a name="[13b]"></a>biquadFilterInitLPF</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, filter.o(i.biquadFilterInitLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationFilter
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInitFilters
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accInit
</UL>

<P><STRONG><a name="[18c]"></a>blackboxDeviceBeginLog</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blackbox_io.o(i.blackboxDeviceBeginLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = blackboxDeviceBeginLog &rArr; blackboxSDCardBeginLog &rArr; blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
</UL>

<P><STRONG><a name="[18e]"></a>blackboxDeviceOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, blackbox_io.o(i.blackboxDeviceOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blackboxDeviceOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isFull
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFilesystemState
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlackbox
</UL>

<P><STRONG><a name="[191]"></a>blackboxPrint</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blackbox_io.o(i.blackboxPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = blackboxPrint &rArr; afatfs_fwrite &rArr; afatfs_fileLockCursorSectorForWrite &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fwrite
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
</UL>

<P><STRONG><a name="[193]"></a>blackboxReplenishHeaderBudget</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, blackbox_io.o(i.blackboxReplenishHeaderBudget))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blackboxReplenishHeaderBudget &rArr; afatfs_getFreeBufferSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFreeBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
</UL>

<P><STRONG><a name="[197]"></a>blackboxStopLogging</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blackbox_io.o(i.blackboxStopLogging))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = blackboxStopLogging &rArr; afatfs_fclose &rArr; afatfs_fcloseContinue &rArr; afatfs_saveDirectoryEntry &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
</UL>

<P><STRONG><a name="[198]"></a>bluetoothSerial6Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bluetoothserial6.o(i.bluetoothSerial6Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bluetoothSerial6Init &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>calculateAccZLowPassFilterRCTimeConstant</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imu.o(i.calculateAccZLowPassFilterRCTimeConstant))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>

<P><STRONG><a name="[1de]"></a>calculateThrottleAngleScale</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, imu.o(i.calculateThrottleAngleScale))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>

<P><STRONG><a name="[19d]"></a>checkEEPROMContainsValidData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config.o(i.checkEEPROMContainsValidData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = checkEEPROMContainsValidData &rArr; resetEEPROM &rArr; createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>configTimeBase4Encoder</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, timer.o(i.configTimeBase4Encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = configTimeBase4Encoder &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[1a2]"></a>cosApprox</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, maths.o(i.cosApprox))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinApprox
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[1a4]"></a>createDefaultConfig</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, config.o(i.createDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intFeatureSet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intFeatureClearAll
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRollAndPitchTrims
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialPinConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLedStatusConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetBeeperConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>

<P><STRONG><a name="[1ac]"></a>dcBrushedMotorInit</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, pwm_output.o(i.dcBrushedMotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dcBrushedMotorInit &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetByTag
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChCCR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>deactivateMotors</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fc_tasks.o(i.deactivateMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deactivateMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[1e0]"></a>degreesToRadians</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maths.o(i.degreesToRadians))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[1b5]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, system.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ResetGyro
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuDetect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
</UL>

<P><STRONG><a name="[1b6]"></a>delayMicroseconds</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, system.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyMPU9250WriteRegister
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_start_sequence
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_start_sequence
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_start_sequence
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_start_sequence
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_start_sequence
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_start_sequence
</UL>

<P><STRONG><a name="[204]"></a>devClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maths.o(i.devClear))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[205]"></a>devPush</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, maths.o(i.devPush))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[1b8]"></a>devStandardDeviation</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, maths.o(i.devStandardDeviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devVariance
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[1b9]"></a>devVariance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, maths.o(i.devVariance))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
</UL>

<P><STRONG><a name="[14b]"></a>fat16_isEndOfChainMarker</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fat_standard.o(i.fat16_isEndOfChainMarker))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATIsEndOfChainMarker
</UL>

<P><STRONG><a name="[149]"></a>fat32_decodeClusterNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fat_standard.o(i.fat32_decodeClusterNumber))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFATPositionForCluster
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>

<P><STRONG><a name="[14c]"></a>fat32_isEndOfChainMarker</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fat_standard.o(i.fat32_isEndOfChainMarker))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATIsEndOfChainMarker
</UL>

<P><STRONG><a name="[167]"></a>fat_convertFilenameToFATStyle</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fat_standard.o(i.fat_convertFilenameToFATStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fat_convertFilenameToFATStyle &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
</UL>

<P><STRONG><a name="[152]"></a>fat_isDirectoryEntryEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fat_standard.o(i.fat_isDirectoryEntryEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[153]"></a>fat_isDirectoryEntryTerminator</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fat_standard.o(i.fat_isDirectoryEntryTerminator))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[17a]"></a>fat_isFreeSpace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fat_standard.o(i.fat_isFreeSpace))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
</UL>

<P><STRONG><a name="[1ba]"></a>fcTasksInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, fc_tasks.o(i.fcTasksInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fcTasksInit &rArr; schedulerInit &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescheduleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>feature</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, feature.o(i.feature))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBlackbox
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDataLogger
</UL>

<P><STRONG><a name="[269]"></a>featureClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.featureClear))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[267]"></a>featureConfigured</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, feature.o(i.featureConfigured))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[268]"></a>featureSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.featureSet))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[1bf]"></a>filterGetNotchQ</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, filter.o(i.filterGetNotchQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = filterGetNotchQ &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInitFilters
</UL>

<P><STRONG><a name="[1c0]"></a>findNextSerialPortConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(i.findNextSerialPortConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findNextSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>

<P><STRONG><a name="[199]"></a>findSerialPortConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i.findSerialPortConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findSerialPortConfig &rArr; findNextSerialPortConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNextSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
</UL>

<P><STRONG><a name="[233]"></a>findSerialPortIndexByIdentifier</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(i.findSerialPortIndexByIdentifier))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
</UL>

<P><STRONG><a name="[202]"></a>findSerialPortUsageByIdentifier</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(i.findSerialPortUsageByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findSerialPortUsageByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
</UL>

<P><STRONG><a name="[76]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>gyroInit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gyro.o(i.gyroInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gyroInit &rArr; mpuDetect &rArr; mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetSampleRate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroDetect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuDetect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInitFilters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[1c7]"></a>gyroInitFilters</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, gyro.o(i.gyroInitFilters))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = gyroInitFilters &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterGetNotchQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
</UL>

<P><STRONG><a name="[1fb]"></a>gyroMPU6xxxGetDividerDrops</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro_sync.o(i.gyroMPU6xxxGetDividerDrops))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
</UL>

<P><STRONG><a name="[1c9]"></a>gyroSetCalibrationCycles</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gyro.o(i.gyroSetCalibrationCycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyroSetCalibrationCycles
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroCalculateCalibratingCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[1c6]"></a>gyroSetSampleRate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gyro_sync.o(i.gyroSetSampleRate))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
</UL>

<P><STRONG><a name="[1cb]"></a>gyroUpdate</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, gyro.o(i.gyroUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gyroUpdate &rArr; performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyroCalibrationComplete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpdateGyro
</UL>

<P><STRONG><a name="[1d1]"></a>handleBlackbox</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, blackbox.o(i.handleBlackbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = handleBlackbox &rArr; blackboxDeviceBeginLog &rArr; blackboxSDCardBeginLog &rArr; blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxStopLogging
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxReplenishHeaderBudget
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxPrint
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxDeviceBeginLog
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDataLogger
</UL>

<P><STRONG><a name="[7e]"></a>hcsr04_extiHandler_ultrasound1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound1 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[7f]"></a>hcsr04_extiHandler_ultrasound2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound2 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[80]"></a>hcsr04_extiHandler_ultrasound3</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound3 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[81]"></a>hcsr04_extiHandler_ultrasound4</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound4 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[82]"></a>hcsr04_extiHandler_ultrasound5</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound5))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound5 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[83]"></a>hcsr04_extiHandler_ultrasound6</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_extiHandler_ultrasound6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hcsr04_extiHandler_ultrasound6 &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasound_hcsr04.o(i.hcsr04_init)
</UL>
<P><STRONG><a name="[1d2]"></a>hcsr04_init</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, ultrasound_hcsr04.o(i.hcsr04_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hcsr04_init &rArr; EXTIConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIHandlerInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIEnable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasoundInit
</UL>

<P><STRONG><a name="[25f]"></a>hcsr04_ultrasound1_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound1_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound1Read
</UL>

<P><STRONG><a name="[1d4]"></a>hcsr04_ultrasound1_start_sequence</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound1_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound1_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound1Update
</UL>

<P><STRONG><a name="[261]"></a>hcsr04_ultrasound2_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound2_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound2Read
</UL>

<P><STRONG><a name="[1d5]"></a>hcsr04_ultrasound2_start_sequence</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound2_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound2_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound2Update
</UL>

<P><STRONG><a name="[262]"></a>hcsr04_ultrasound3_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound3_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound3Read
</UL>

<P><STRONG><a name="[1d6]"></a>hcsr04_ultrasound3_start_sequence</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound3_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound3_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound3Update
</UL>

<P><STRONG><a name="[263]"></a>hcsr04_ultrasound4_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound4_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound4Read
</UL>

<P><STRONG><a name="[1d7]"></a>hcsr04_ultrasound4_start_sequence</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound4_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound4_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound4Update
</UL>

<P><STRONG><a name="[264]"></a>hcsr04_ultrasound5_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound5_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound5Read
</UL>

<P><STRONG><a name="[1d8]"></a>hcsr04_ultrasound5_start_sequence</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound5_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound5_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound5Update
</UL>

<P><STRONG><a name="[265]"></a>hcsr04_ultrasound6_get_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound6_get_distance))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound6Read
</UL>

<P><STRONG><a name="[1d9]"></a>hcsr04_ultrasound6_start_sequence</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ultrasound_hcsr04.o(i.hcsr04_ultrasound6_start_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hcsr04_ultrasound6_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound6Update
</UL>

<P><STRONG><a name="[143]"></a>imuConfigure</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, imu.o(i.imuConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imuConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateThrottleAngleScale
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAccZLowPassFilterRCTimeConstant
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[1df]"></a>imuInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, imu.o(i.imuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imuInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degreesToRadians
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosApprox
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>initBlackbox</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, blackbox.o(i.initBlackbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initBlackbox &rArr; blackboxSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>initEEPROM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_eeprom.o(i.initEEPROM))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>intFeatureClearAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, feature.o(i.intFeatureClearAll))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[1a6]"></a>intFeatureSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feature.o(i.intFeatureSet))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[13e]"></a>isAccelerationCalibrationComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, acceleration.o(i.isAccelerationCalibrationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[1cf]"></a>isGyroCalibrationComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gyro.o(i.isGyroCalibrationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[95]"></a>isUartTransmitBufferEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_uart.o(i.isUartTransmitBufferEmpty))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>latchActiveFeatures</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.latchActiveFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23a]"></a>layDownSBWMR</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, fc_tasks.o(i.layDownSBWMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = layDownSBWMR
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[239]"></a>liftUpSBWMR</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, fc_tasks.o(i.liftUpSBWMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = liftUpSBWMR
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[238]"></a>limitMotorPwm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fc_tasks.o(i.limitMotorPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = limitMotorPwm
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[ad]"></a>main</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main &rArr; sensorsAutodetect &rArr; gyroInit &rArr; mpuDetect &rArr; mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcardInsertionDetectInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidInitFilters
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latchActiveFeatures
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEPROM
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBlackbox
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkEEPROMContainsValidData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accSetCalibrationCycles
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGlobalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b7]"></a>micros</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, system.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microsISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound6
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound5
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_extiHandler_ultrasound1
</UL>

<P><STRONG><a name="[1f8]"></a>microsISR</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system.o(i.microsISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = microsISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>

<P><STRONG><a name="[196]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_start_sequence
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_start_sequence
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_start_sequence
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_start_sequence
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_start_sequence
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_start_sequence
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSetState
</UL>

<P><STRONG><a name="[1ec]"></a>modeSwitchBtnPollInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, button.o(i.modeSwitchBtnPollInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = modeSwitchBtnPollInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>mpu9250ReadRegister</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, accgyro_spi_mpu9250.o(i.mpu9250ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuDetect)
</UL>
<P><STRONG><a name="[8e]"></a>mpu9250ResetGyro</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, accgyro_spi_mpu9250.o(i.mpu9250ResetGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mpu9250ResetGyro &rArr; mpu9250WriteRegister &rArr; spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuDetect)
</UL>
<P><STRONG><a name="[8b]"></a>mpu9250SlowReadRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, accgyro_spi_mpu9250.o(i.mpu9250SlowReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mpu9250SlowReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyMPU9250WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuDetect)
</UL>
<P><STRONG><a name="[138]"></a>mpu9250SpiAccDetect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, accgyro_spi_mpu9250.o(i.mpu9250SpiAccDetect))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accDetect
</UL>

<P><STRONG><a name="[84]"></a>mpu9250SpiAccInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, accgyro_spi_mpu9250.o(i.mpu9250SpiAccInit))
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiAccDetect)
</UL>
<P><STRONG><a name="[1fe]"></a>mpu9250SpiDetect</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, accgyro_spi_mpu9250.o(i.mpu9250SpiDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ReadRegister
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuDetect
</UL>

<P><STRONG><a name="[1c5]"></a>mpu9250SpiGyroDetect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
</UL>

<P><STRONG><a name="[86]"></a>mpu9250SpiGyroInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, accgyro_spi_mpu9250.o(i.mpu9250SpiGyroInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mpu9250SpiGyroInit &rArr; mpu9250AccAndGyroInit &rArr; verifyMPU9250WriteRegister &rArr; mpu9250SlowReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiResetErrorCounter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGetErrorCounter
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroRead
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpuGyroInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
</UL>
<P><STRONG><a name="[8c]"></a>mpu9250WriteRegister</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, accgyro_spi_mpu9250.o(i.mpu9250WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mpu9250WriteRegister &rArr; spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyMPU9250WriteRegister
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ResetGyro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuDetect)
</UL>
<P><STRONG><a name="[85]"></a>mpuAccRead</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, accgyro_mpu.o(i.mpuAccRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpuAccRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiAccDetect)
</UL>
<P><STRONG><a name="[89]"></a>mpuCheckDataReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accgyro_mpu.o(i.mpuCheckDataReady))
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
</UL>
<P><STRONG><a name="[1c4]"></a>mpuDetect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, accgyro_mpu.o(i.mpuDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mpuDetect &rArr; mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
</UL>

<P><STRONG><a name="[1ff]"></a>mpuGyroInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, accgyro_mpu.o(i.mpuGyroInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mpuGyroInit &rArr; EXTIConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIHandlerInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIEnable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
</UL>

<P><STRONG><a name="[87]"></a>mpuGyroRead</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, accgyro_mpu.o(i.mpuGyroRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpuGyroRead
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
</UL>
<P><STRONG><a name="[88]"></a>mpuTemperatureRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, accgyro_mpu.o(i.mpuTemperatureRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpuTemperatureRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_spi_mpu9250.o(i.mpu9250SpiGyroDetect)
</UL>
<P><STRONG><a name="[7b]"></a>nullFilterApply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, filter.o(i.nullFilterApply))
<BR>[Address Reference Count : 1]<UL><LI> gyro.o(i.gyroInitFilters)
</UL>
<P><STRONG><a name="[1f1]"></a>oledInit</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, oled.o(i.oledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oledInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>oled_pow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, oled.o(i.oled_pow))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNumber
</UL>

<P><STRONG><a name="[19a]"></a>openSerialPort</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, serial.o(i.openSerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortUsageByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
</UL>

<P><STRONG><a name="[1f6]"></a>pidInitFilters</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pid.o(i.pidInitFilters))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>pt1FilterApply</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, filter.o(i.pt1FilterApply))
<BR>[Address Reference Count : 2]<UL><LI> gyro.o(i.gyroInitFilters)
<LI> pid.o(i.pidInitFilters)
</UL>
<P><STRONG><a name="[1c8]"></a>pt1FilterInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, filter.o(i.pt1FilterInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidInitFilters
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInitFilters
</UL>

<P><STRONG><a name="[207]"></a>pwmEncoderICConfig</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rx_pwm.o(i.pwmEncoderICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwmEncoderICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
</UL>

<P><STRONG><a name="[1ee]"></a>pwmEncoderInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rx_pwm.o(i.pwmEncoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pwmEncoderInit &rArr; pwmEncoderICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetByTag
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[266]"></a>pwmWriteDcBrushedMotor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_output.o(i.pwmWriteDcBrushedMotor))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[20a]"></a>queueAdd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, scheduler.o(i.queueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueContains
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
</UL>

<P><STRONG><a name="[20d]"></a>queueClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(i.queueClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = queueClear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
</UL>

<P><STRONG><a name="[20b]"></a>queueContains</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scheduler.o(i.queueContains))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queueContains
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>

<P><STRONG><a name="[212]"></a>queueFirst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(i.queueFirst))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[213]"></a>queueNext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(i.queueNext))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[20e]"></a>queueRemove</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scheduler.o(i.queueRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queueRemove &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
</UL>

<P><STRONG><a name="[260]"></a>quickMedianFilter5</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, maths.o(i.quickMedianFilter5))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound6Read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound5Read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound4Read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound3Read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound2Read
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound1Read
</UL>

<P><STRONG><a name="[21e]"></a>readBitfield</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, sdcard_standard.o(i.readBitfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readBitfield
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
</UL>

<P><STRONG><a name="[1ea]"></a>readEEPROM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config_eeprom.o(i.readEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = readEEPROM &rArr; activateConfig &rArr; setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProfile
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>rescheduleTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, scheduler.o(i.rescheduleTask))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
</UL>

<P><STRONG><a name="[19e]"></a>resetEEPROM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(i.resetEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = resetEEPROM &rArr; createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProfile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkEEPROMContainsValidData
</UL>

<P><STRONG><a name="[1e9]"></a>rxSerial3TestInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rxserial3test.o(i.rxSerial3TestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rxSerial3TestInit &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>rxSerial3TestWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rxserial3test.o(i.rxSerial3TestWrite))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f7]"></a>scheduler</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, scheduler.o(i.scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = scheduler &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueNext
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>schedulerInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(i.schedulerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedulerInit &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueClear
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
</UL>

<P><STRONG><a name="[1f2]"></a>sdcardInsertionDetectInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdcard.o(i.sdcardInsertionDetectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sdcardInsertionDetectInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>sdcard_beginWriteBlocks</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_beginWriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdcard_beginWriteBlocks &rArr; sdcard_sendAppCommand &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendAppCommand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheFlushSector
</UL>

<P><STRONG><a name="[1f3]"></a>sdcard_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdcard.o(i.sdcard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sdcard_init &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>sdcard_isInserted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdcard.o(i.sdcard_isInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdcard_isInserted
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
</UL>

<P><STRONG><a name="[186]"></a>sdcard_poll</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, sdcard.o(i.sdcard_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sdcard_poll &rArr; sdcard_receiveCID &rArr; sdcard_receiveDataBlock &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForIdle
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendAppCommand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveCID
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_poll
</UL>

<P><STRONG><a name="[161]"></a>sdcard_readBlock</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sdcard.o(i.sdcard_readBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
</UL>

<P><STRONG><a name="[160]"></a>sdcard_writeBlock</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, sdcard.o(i.sdcard_writeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdcard_writeBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheFlushSector
</UL>

<P><STRONG><a name="[139]"></a>sensorSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, runtime_config.o(i.sensorSet))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasoundInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accDetect
</UL>

<P><STRONG><a name="[1bd]"></a>sensors</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, runtime_config.o(i.sensors))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskIMUUpdateAttitude
</UL>

<P><STRONG><a name="[1f0]"></a>sensorsAutodetect</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, initialisation.o(i.sensorsAutodetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sensorsAutodetect &rArr; gyroInit &rArr; mpuDetect &rArr; mpu9250SpiDetect &rArr; mpu9250ReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasoundInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>serialInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i.serialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>serialUART</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, serial_uart_stm32f4xx.o(i.serialUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART6
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART3
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART1
</UL>

<P><STRONG><a name="[224]"></a>serialUART1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.serialUART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART1 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[225]"></a>serialUART3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.serialUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART3 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[226]"></a>serialUART6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.serialUART6))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[211]"></a>serialWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i.serialWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestWrite
</UL>

<P><STRONG><a name="[142]"></a>setAccelerationFilter</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, acceleration.o(i.setAccelerationFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[141]"></a>setAccelerationTrims</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acceleration.o(i.setAccelerationTrims))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[20f]"></a>setProfile</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, config.o(i.setProfile))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>

<P><STRONG><a name="[1bc]"></a>setTaskEnabled</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, scheduler.o(i.setTaskEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setTaskEnabled &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
</UL>

<P><STRONG><a name="[1a3]"></a>sinApprox</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, maths.o(i.sinApprox))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosApprox
</UL>

<P><STRONG><a name="[227]"></a>spiDeviceByInstance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bus_spi.o(i.spiDeviceByInstance))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiResetErrorCounter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGetErrorCounter
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTimeoutUserCallback
</UL>

<P><STRONG><a name="[201]"></a>spiGetErrorCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, bus_spi.o(i.spiGetErrorCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiGetErrorCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDeviceByInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
</UL>

<P><STRONG><a name="[1ef]"></a>spiInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bus_spi.o(i.spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = spiInit &rArr; spiInitDevice &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[228]"></a>spiInitDevice</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, bus_spi.o(i.spiInitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiInitDevice &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[21a]"></a>spiIsBusBusy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bus_spi.o(i.spiIsBusBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiIsBusBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>

<P><STRONG><a name="[200]"></a>spiResetErrorCounter</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bus_spi.o(i.spiResetErrorCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiResetErrorCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDeviceByInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
</UL>

<P><STRONG><a name="[1fa]"></a>spiSetDivisor</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bus_spi.o(i.spiSetDivisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiSetDivisor
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiDetect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_reset
</UL>

<P><STRONG><a name="[22c]"></a>spiTimeoutUserCallback</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, bus_spi.o(i.spiTimeoutUserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDeviceByInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
</UL>

<P><STRONG><a name="[1fd]"></a>spiTransfer</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bus_spi.o(i.spiTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTimeoutUserCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ReadRegister
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
</UL>

<P><STRONG><a name="[1fc]"></a>spiTransferByte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bus_spi.o(i.spiTransferByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTimeoutUserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250ReadRegister
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForNonIdleByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForIdle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
</UL>

<P><STRONG><a name="[11f]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[22f]"></a>startBlackbox</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blackbox.o(i.startBlackbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = startBlackbox &rArr; blackboxSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxDeviceOpen
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateBlackboxConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[189]"></a>systemBeep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sound_beeper.o(i.systemBeep))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
</UL>

<P><STRONG><a name="[1e5]"></a>systemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.systemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = systemInit &rArr; EnableGPIOClk &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>targetConfiguration</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, config.o(i.targetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortIndexByIdentifier
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[6]"></a>taskIMUUpdateAttitude</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, imu.o(i.taskIMUUpdateAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = taskIMUUpdateAttitude &rArr; imuCalculateEstimatedAttitude &rArr; imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>taskSystem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scheduler.o(i.taskSystem))
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>timerChCCR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timerChCCR))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[1ad]"></a>timerGetByTag</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, timer.o(i.timerGetByTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timerGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[1ed]"></a>timerInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timerInit &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerRCC
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>timerOCInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(i.timerOCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerOCInit &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[1b0]"></a>timerOCPreloadConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(i.timerOCPreloadConfig))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[245]"></a>timerRCC</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.timerRCC))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[11c]"></a>uartIrqHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, serial_uart_stm32f4xx.o(i.uartIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>uartOpen</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, serial_uart.o(i.uartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART6
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART3
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART1
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
</UL>

<P><STRONG><a name="[93]"></a>uartRead</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, serial_uart.o(i.uartRead))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>uartSetBaudRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_uart.o(i.uartSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartSetBaudRate &rArr; uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>uartSetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_uart.o(i.uartSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartSetMode &rArr; uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>uartStartTxDMA</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, serial_uart.o(i.uartStartTxDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartStartTxDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[91]"></a>uartTotalRxBytesWaiting</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_uart.o(i.uartTotalRxBytesWaiting))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>uartTotalTxBytesFree</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial_uart.o(i.uartTotalTxBytesFree))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>uartWrite</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serial_uart.o(i.uartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartWrite &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>ultrasound1Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound1Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound1ReadData
</UL>

<P><STRONG><a name="[9]"></a>ultrasound1Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound1Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound1Update &rArr; hcsr04_ultrasound1_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound1_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[240]"></a>ultrasound2Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound2Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound2Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound2ReadData
</UL>

<P><STRONG><a name="[b]"></a>ultrasound2Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound2Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound2Update &rArr; hcsr04_ultrasound2_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound2_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[241]"></a>ultrasound3Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound3Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound3Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound3ReadData
</UL>

<P><STRONG><a name="[d]"></a>ultrasound3Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound3Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound3Update &rArr; hcsr04_ultrasound3_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound3_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[242]"></a>ultrasound4Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound4Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound4Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound4ReadData
</UL>

<P><STRONG><a name="[f]"></a>ultrasound4Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound4Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound4Update &rArr; hcsr04_ultrasound4_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound4_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[243]"></a>ultrasound5Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound5Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound5Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound5ReadData
</UL>

<P><STRONG><a name="[11]"></a>ultrasound5Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound5Update &rArr; hcsr04_ultrasound5_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound5_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[244]"></a>ultrasound6Read</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ultrasound.o(i.ultrasound6Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ultrasound6Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_get_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickMedianFilter5
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUltrasound6ReadData
</UL>

<P><STRONG><a name="[13]"></a>ultrasound6Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ultrasound.o(i.ultrasound6Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ultrasound6Update &rArr; hcsr04_ultrasound6_start_sequence &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_ultrasound6_start_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>ultrasoundInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ultrasound.o(i.ultrasoundInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ultrasoundInit &rArr; hcsr04_init &rArr; EXTIConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[23b]"></a>updateMotorPwm</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fc_tasks.o(i.updateMotorPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updateMotorPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWriteDcBrushedMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[210]"></a>validateAndFixConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, config.o(i.validateAndFixConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validateAndFixConfig &rArr; validateAndFixGyroConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureSet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureConfigured
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureClear
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixGyroConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[26a]"></a>validateAndFixGyroConfig</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, config.o(i.validateAndFixGyroConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validateAndFixGyroConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[230]"></a>validateBlackboxConfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, blackbox.o(i.validateBlackboxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validateBlackboxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlackbox
</UL>

<P><STRONG><a name="[8d]"></a>verifyMPU9250WriteRegister</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, accgyro_spi_mpu9250.o(i.verifyMPU9250WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = verifyMPU9250WriteRegister &rArr; mpu9250SlowReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SlowReadRegister
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250AccAndGyroInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuDetect)
</UL>
<P><STRONG><a name="[74]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[26b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[26e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[274]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[271]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[272]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[2b6]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[273]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[277]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[275]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[26d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[270]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[276]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[130]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[278]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskOLEDDisplay
</UL>

<P><STRONG><a name="[27a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[12b]"></a>_ffix_r</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffixr))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>

<P><STRONG><a name="[27b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[a2]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2b7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2b8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[26c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[12c]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>

<P><STRONG><a name="[9c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[117]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[119]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[8f]"></a>mpuIntExtiHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accgyro_mpu.o(i.mpuIntExtiHandler))
<BR>[Address Reference Count : 1]<UL><LI> accgyro_mpu.o(i.mpuGyroInit)
</UL>
<P><STRONG><a name="[1f9]"></a>mpu9250AccAndGyroInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, accgyro_spi_mpu9250.o(i.mpu9250AccAndGyroInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mpu9250AccAndGyroInit &rArr; verifyMPU9250WriteRegister &rArr; mpu9250SlowReadRegister &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroMPU6xxxGetDividerDrops
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyMPU9250WriteRegister
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250WriteRegister
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250SpiGyroInit
</UL>

<P><STRONG><a name="[218]"></a>sdcard_deselect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdcard.o(i.sdcard_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdcard_deselect &rArr; spiIsBusBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
</UL>

<P><STRONG><a name="[214]"></a>sdcard_endWriteBlocks</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_endWriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sdcard_endWriteBlocks &rArr; sdcard_waitForNonIdleByte &rArr; spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForNonIdleByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
</UL>

<P><STRONG><a name="[21c]"></a>sdcard_fetchCSD</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sdcard.o(i.sdcard_fetchCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdcard_fetchCSD &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitfield
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_select
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
</UL>

<P><STRONG><a name="[220]"></a>sdcard_receiveCID</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sdcard.o(i.sdcard_receiveCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdcard_receiveCID &rArr; sdcard_receiveDataBlock &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
</UL>

<P><STRONG><a name="[21d]"></a>sdcard_receiveDataBlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_receiveDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sdcard_receiveDataBlock &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForNonIdleByte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveCID
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
</UL>

<P><STRONG><a name="[219]"></a>sdcard_reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdcard_reset &rArr; spiSetDivisor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetDivisor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_isInserted
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
</UL>

<P><STRONG><a name="[215]"></a>sdcard_select</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcard.o(i.sdcard_select))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
</UL>

<P><STRONG><a name="[216]"></a>sdcard_sendAppCommand</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_sendAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sdcard_sendAppCommand &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
</UL>

<P><STRONG><a name="[217]"></a>sdcard_sendCommand</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_sendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForNonIdleByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_waitForIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendAppCommand
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_fetchCSD
</UL>

<P><STRONG><a name="[221]"></a>sdcard_waitForIdle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_waitForIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sdcard_waitForIdle &rArr; spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_poll
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
</UL>

<P><STRONG><a name="[21b]"></a>sdcard_waitForNonIdleByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdcard.o(i.sdcard_waitForNonIdleByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sdcard_waitForNonIdleByte &rArr; spiTransferByte &rArr; spiTimeoutUserCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_sendCommand
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_receiveDataBlock
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_endWriteBlocks
</UL>

<P><STRONG><a name="[252]"></a>uartReconfigure</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, serial_uart.o(i.uartReconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSetMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSetBaudRate
</UL>

<P><STRONG><a name="[114]"></a>timCCxHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, timer.o(i.timCCxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timCCxHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>constrain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(i.constrain))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixGyroConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
</UL>

<P><STRONG><a name="[19b]"></a>buttonModeSwitchHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fc_tasks.o(i.buttonModeSwitchHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buttonModeSwitchHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IORead
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[15]"></a>taskDataLogger</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fc_tasks.o(i.taskDataLogger))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = taskDataLogger &rArr; handleBlackbox &rArr; blackboxDeviceBeginLog &rArr; blackboxSDCardBeginLog &rArr; blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>taskMotorEncoder</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, fc_tasks.o(i.taskMotorEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = taskMotorEncoder &rArr; velocityControlSBWMR &rArr; activateMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yawControlSBWMR
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocityControlSBWMR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonModeSwitchHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlackbox
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitMotorPwm
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;liftUpSBWMR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layDownSBWMR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deactivateMotors
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateMotors
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Encoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>taskOLEDDisplay</STRONG> (Thumb, 866 bytes, Stack size 152 bytes, fc_tasks.o(i.taskOLEDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = taskOLEDDisplay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNumber
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>taskUltrasound1ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound1ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound1ReadData &rArr; ultrasound1Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound1Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>taskUltrasound2ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound2ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound2ReadData &rArr; ultrasound2Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound2Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>taskUltrasound3ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound3ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound3ReadData &rArr; ultrasound3Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound3Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>taskUltrasound4ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound4ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound4ReadData &rArr; ultrasound4Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound4Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>taskUltrasound5ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound5ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound5ReadData &rArr; ultrasound5Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound5Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>taskUltrasound6ReadData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fc_tasks.o(i.taskUltrasound6ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = taskUltrasound6ReadData &rArr; ultrasound6Read &rArr; quickMedianFilter5
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasound6Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>taskUpdateAccelerometer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fc_tasks.o(i.taskUpdateAccelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = taskUpdateAccelerometer &rArr; accUpdate &rArr; alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>taskUpdateGyro</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fc_tasks.o(i.taskUpdateGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = taskUpdateGyro &rArr; gyroUpdate &rArr; performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[236]"></a>velocityControlSBWMR</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, fc_tasks.o(i.velocityControlSBWMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = velocityControlSBWMR &rArr; activateMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[237]"></a>yawControlSBWMR</STRONG> (Thumb, 278 bytes, Stack size 12 bytes, fc_tasks.o(i.yawControlSBWMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = yawControlSBWMR
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[145]"></a>afatfs_FATGetNextCluster</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_FATGetNextCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat32_decodeClusterNumber
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFATPositionForCluster
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fatSectorToPhysical
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncateContinue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetNextCluster
</UL>

<P><STRONG><a name="[14a]"></a>afatfs_FATIsEndOfChainMarker</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_FATIsEndOfChainMarker))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat32_isEndOfChainMarker
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat16_isEndOfChainMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncateContinue
</UL>

<P><STRONG><a name="[14d]"></a>afatfs_FATSetNextCluster</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_FATSetNextCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = afatfs_FATSetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFATPositionForCluster
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fatSectorToPhysical
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncateContinue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
</UL>

<P><STRONG><a name="[14e]"></a>afatfs_allocateCacheSector</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_allocateCacheSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = afatfs_allocateCacheSector &rArr; afatfs_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
</UL>

<P><STRONG><a name="[150]"></a>afatfs_allocateDirectoryEntry</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_allocateDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isDirectoryEntryTerminator
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isDirectoryEntryEmpty
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getCacheDescriptorIndexForBuffer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSectorMarkDirty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterInitOperationState
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
</UL>

<P><STRONG><a name="[17e]"></a>afatfs_allocateFileHandle</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_allocateFileHandle))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_mkdir
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fopen
</UL>

<P><STRONG><a name="[15a]"></a>afatfs_appendRegularFreeClusterContinue</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_appendRegularFreeClusterContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_saveDirectoryEntry
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_clusterSize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATSetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
</UL>

<P><STRONG><a name="[157]"></a>afatfs_appendRegularFreeClusterInitOperationState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_appendRegularFreeClusterInitOperationState))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[14f]"></a>afatfs_assert</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = afatfs_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_sdcardWriteComplete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_sdcardReadComplete
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_saveDirectoryEntry
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getCacheDescriptorIndexForBuffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateCacheSector
</UL>

<P><STRONG><a name="[17f]"></a>afatfs_byteIndexInCluster</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_byteIndexInCluster))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_sectorIndexInCluster
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
</UL>

<P><STRONG><a name="[15e]"></a>afatfs_cacheFlushSector</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_cacheFlushSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = afatfs_cacheFlushSector &rArr; sdcard_writeBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_writeBlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_beginWriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_flush
</UL>

<P><STRONG><a name="[148]"></a>afatfs_cacheSector</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_cacheSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_readBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSectorMarkDirty
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateCacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_saveDirectoryEntry
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initContinue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATSetNextCluster
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>

<P><STRONG><a name="[155]"></a>afatfs_cacheSectorMarkDirty</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_cacheSectorMarkDirty))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[15c]"></a>afatfs_clusterSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_clusterSize))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
</UL>

<P><STRONG><a name="[165]"></a>afatfs_createFile</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_createFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_convertFilenameToFATStyle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initFileHandle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_mkdir
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fopen
</UL>

<P><STRONG><a name="[168]"></a>afatfs_createFileContinue</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, asyncfatfs.o(i.afatfs_createFileContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isDirectoryEntryTerminator
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findFirst
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternal
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_clusterSize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
</UL>

<P><STRONG><a name="[158]"></a>afatfs_extendSubdirectoryContinue</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, asyncfatfs.o(i.afatfs_extendSubdirectoryContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_sectorIndexInCluster
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetCursorPhysicalSector
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[147]"></a>afatfs_fatSectorToPhysical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_fatSectorToPhysical))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATSetNextCluster
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>

<P><STRONG><a name="[172]"></a>afatfs_fcloseContinue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fcloseContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = afatfs_fcloseContinue &rArr; afatfs_saveDirectoryEntry &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_saveDirectoryEntry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
</UL>

<P><STRONG><a name="[16e]"></a>afatfs_fileGetCursorPhysicalSector</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fileGetCursorPhysicalSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = afatfs_fileGetCursorPhysicalSector &rArr; afatfs_sectorIndexInCluster
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_sectorIndexInCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
</UL>

<P><STRONG><a name="[173]"></a>afatfs_fileGetNextCluster</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_fileGetNextCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
</UL>

<P><STRONG><a name="[151]"></a>afatfs_fileIsBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_fileIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fwrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[174]"></a>afatfs_fileLockCursorSectorForWrite</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fileLockCursorSectorForWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = afatfs_fileLockCursorSectorForWrite &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getCacheDescriptorIndexForBuffer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetCursorPhysicalSector
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterInitOperationState
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fwrite
</UL>

<P><STRONG><a name="[176]"></a>afatfs_fileOperationContinue</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_fileOperationContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = afatfs_fileOperationContinue &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncateContinue
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fcloseContinue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_poll
</UL>

<P><STRONG><a name="[179]"></a>afatfs_fileRetainCursorSectorForRead</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_fileRetainCursorSectorForRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = afatfs_fileRetainCursorSectorForRead &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getCacheDescriptorIndexForBuffer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetCursorPhysicalSector
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
</UL>

<P><STRONG><a name="[156]"></a>afatfs_fileUnlockCacheSector</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, asyncfatfs.o(i.afatfs_fileUnlockCacheSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = afatfs_fileUnlockCacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findLast
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fcloseContinue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[171]"></a>afatfs_fileUpdateFilesize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asyncfatfs.o(i.afatfs_fileUpdateFilesize))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
</UL>

<P><STRONG><a name="[15b]"></a>afatfs_findClusterWithCondition</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, asyncfatfs.o(i.afatfs_findClusterWithCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isFreeSpace
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat32_decodeClusterNumber
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFATPositionForCluster
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fatSectorToPhysical
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
</UL>

<P><STRONG><a name="[16f]"></a>afatfs_fseekAtomic</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_fseekAtomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUnlockCacheSector
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetNextCluster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_clusterSize
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_byteIndexInCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
</UL>

<P><STRONG><a name="[16b]"></a>afatfs_fseekInternal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_fseekInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fwrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseek
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFileContinue
</UL>

<P><STRONG><a name="[177]"></a>afatfs_fseekInternalContinue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_fseekInternalContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = afatfs_fseekInternalContinue &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_isEndOfAllocatedFile
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileUpdateFilesize
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetNextCluster
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_clusterSize
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_byteIndexInCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
</UL>

<P><STRONG><a name="[178]"></a>afatfs_ftruncateContinue</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, asyncfatfs.o(i.afatfs_ftruncateContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = afatfs_ftruncateContinue &rArr; afatfs_saveDirectoryEntry &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_saveDirectoryEntry
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATSetNextCluster
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATIsEndOfChainMarker
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileOperationContinue
</UL>

<P><STRONG><a name="[154]"></a>afatfs_getCacheDescriptorIndexForBuffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_getCacheDescriptorIndexForBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = afatfs_getCacheDescriptorIndexForBuffer &rArr; afatfs_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_allocateDirectoryEntry
</UL>

<P><STRONG><a name="[146]"></a>afatfs_getFATPositionForCluster</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_getFATPositionForCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = afatfs_getFATPositionForCluster
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat32_decodeClusterNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findClusterWithCondition
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATSetNextCluster
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATGetNextCluster
</UL>

<P><STRONG><a name="[182]"></a>afatfs_initContinue</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_initContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = afatfs_initContinue &rArr; afatfs_chdir &rArr; afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_parseVolumeID
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_poll
</UL>

<P><STRONG><a name="[163]"></a>afatfs_initFileHandle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_initFileHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = afatfs_initFileHandle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_createFile
</UL>

<P><STRONG><a name="[175]"></a>afatfs_isEndOfAllocatedFile</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_isEndOfAllocatedFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = afatfs_isEndOfAllocatedFile
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_FATIsEndOfChainMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekInternalContinue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fseekAtomic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileRetainCursorSectorForRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileLockCursorSectorForWrite
</UL>

<P><STRONG><a name="[183]"></a>afatfs_parseVolumeID</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, asyncfatfs.o(i.afatfs_parseVolumeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = afatfs_parseVolumeID
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_initContinue
</UL>

<P><STRONG><a name="[15d]"></a>afatfs_saveDirectoryEntry</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, asyncfatfs.o(i.afatfs_saveDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = afatfs_saveDirectoryEntry &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_cacheSector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_ftruncateContinue
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fcloseContinue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_appendRegularFreeClusterContinue
</UL>

<P><STRONG><a name="[78]"></a>afatfs_sdcardReadComplete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_sdcardReadComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = afatfs_sdcardReadComplete &rArr; afatfs_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asyncfatfs.o(i.afatfs_cacheSector)
</UL>
<P><STRONG><a name="[77]"></a>afatfs_sdcardWriteComplete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, asyncfatfs.o(i.afatfs_sdcardWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = afatfs_sdcardWriteComplete &rArr; afatfs_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asyncfatfs.o(i.afatfs_cacheFlushSector)
</UL>
<P><STRONG><a name="[16d]"></a>afatfs_sectorIndexInCluster</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, asyncfatfs.o(i.afatfs_sectorIndexInCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = afatfs_sectorIndexInCluster
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_byteIndexInCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fileGetCursorPhysicalSector
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_extendSubdirectoryContinue
</UL>

<P><STRONG><a name="[1da]"></a>imuCalculateEstimatedAttitude</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, imu.o(i.imuCalculateEstimatedAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imuCalculateEstimatedAttitude &rArr; imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskIMUUpdateAttitude
</UL>

<P><STRONG><a name="[1e1]"></a>imuComputeRotationMatrix</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, imu.o(i.imuComputeRotationMatrix))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>

<P><STRONG><a name="[1db]"></a>imuMahonyAHRSUpdate</STRONG> (Thumb, 666 bytes, Stack size 88 bytes, imu.o(i.imuMahonyAHRSUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
</UL>

<P><STRONG><a name="[1dc]"></a>imuUpdateEulerAngles</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, imu.o(i.imuUpdateEulerAngles))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = imuUpdateEulerAngles &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
</UL>

<P><STRONG><a name="[1e2]"></a>invSqrt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imu.o(i.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>

<P><STRONG><a name="[13f]"></a>performAccelerationCalibration</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, acceleration.o(i.performAccelerationCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = performAccelerationCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[1ca]"></a>gyroCalculateCalibratingCycles</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gyro.o(i.gyroCalculateCalibratingCycles))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[206]"></a>isOnFinalGyroCalibrationCycle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gyro.o(i.isOnFinalGyroCalibrationCycle))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[1d0]"></a>performGyroCalibration</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, gyro.o(i.performGyroCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devPush
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devClear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOnFinalGyroCalibrationCycle
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroCalculateCalibratingCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[187]"></a>alignBoard</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, boardalignment.o(i.alignBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
</UL>

<P><STRONG><a name="[195]"></a>blackboxSetState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, blackbox.o(i.blackboxSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blackboxSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBlackbox
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlackbox
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBlackbox
</UL>

<P><STRONG><a name="[1c2]"></a>gcd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blackbox.o(i.gcd))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateBlackboxConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
</UL>

<P><STRONG><a name="[18b]"></a>blackboxCreateLogFile</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, blackbox_io.o(i.blackboxCreateLogFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fopen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxSDCardBeginLog
</UL>

<P><STRONG><a name="[7a]"></a>blackboxLogDirCreated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blackbox_io.o(i.blackboxLogDirCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = blackboxLogDirCreated &rArr; afatfs_findFirst &rArr; afatfs_fseek &rArr; afatfs_fseekInternal &rArr; afatfs_fseekAtomic &rArr; afatfs_fileGetNextCluster &rArr; afatfs_FATGetNextCluster &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findFirst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blackbox_io.o(i.blackboxSDCardBeginLog)
</UL>
<P><STRONG><a name="[79]"></a>blackboxLogFileCreated</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, blackbox_io.o(i.blackboxLogFileCreated))
<BR>[Address Reference Count : 1]<UL><LI> blackbox_io.o(i.blackboxCreateLogFile)
</UL>
<P><STRONG><a name="[18d]"></a>blackboxSDCardBeginLog</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, blackbox_io.o(i.blackboxSDCardBeginLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = blackboxSDCardBeginLog &rArr; blackboxCreateLogFile &rArr; afatfs_fopen &rArr; afatfs_createFile &rArr; afatfs_createFileContinue &rArr; afatfs_allocateDirectoryEntry &rArr; afatfs_extendSubdirectoryContinue &rArr; afatfs_appendRegularFreeClusterContinue &rArr; afatfs_findClusterWithCondition &rArr; afatfs_cacheSector &rArr; sdcard_readBlock &rArr; sdcard_sendCommand &rArr; spiTransfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isDirectoryEntryTerminator
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_mkdir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_getFilesystemState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findNext
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_findLast
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_fclose
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afatfs_chdir
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxCreateLogFile
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blackboxDeviceBeginLog
</UL>

<P><STRONG><a name="[279]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[26f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[cb]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[75]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
